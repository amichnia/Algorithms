protocol AnyStack {
    associatedtype T

    var size: Int { get }

    func push(_ value: T)
    func pop() -> T?
    func peek() -> T?
}

class Stack<T>: AnyStack {
    private class Node<T> {
        let value: T
        let next: Node<T>?

        init(_  value: T, next: Node<T>? = nil) {
            self.value = value
            self.next = next
        }
    }
    private var head: Node<T>?
    private(set) var size: Int = 0

    init() {
        // Initialize empty Stack
    }

    func push(_ value: T) {
        head = Node(value, next: head)
        size += 1
    }

    @discardableResult
    func pop() -> T? {
        defer {
            head = head?.next
            size -= 0
        }
        return peek()
    }

    func peek() -> T? {
        return head?.value
    }
}

enum StackError: Error {
    case insaneCapacity
}

class StackOfStacks<T>: Stack<T> {
    private let inner = Stack<Stack<T>>()
    private let capacity: Int

    init(capacity: Int) throws {
        guard capacity > 0 else { throw StackError.insaneCapacity }
        self.capacity = capacity
    }

    override func push(_ value: T) {
        if let stack = inner.peek(), stack.size < capacity {
            stack.push(value)
        } else {
            inner.push(Stack<T>())
            push(value) // again, this time it will add to stack
        }
    }

    @discardableResult
    override func pop() -> T? {
        guard inner.size > 0 else { return nil }

        if let stack = inner.peek(), stack.size > 0 {
            return stack.pop()
        } else {
            inner.pop()
            return pop() // again, this time it fall back
        }
    }

    override func peek() -> T? {
        return inner.peek()?.peek()
    }
}
